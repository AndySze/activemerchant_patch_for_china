h1. activemerchant_patch_for_china

*Please note! This active_merchant patch is written by nouse.*

This plugin is an active_merchant patch for china online payment platform, now it supports alipay (支付宝), 99bill (快钱) and tenpay (财付通).

**************************************************************************

h2. Install

install active_merchant and activemerchant_patch_for_china as plugins:

<pre><code>
script/plugin install git://github.com/Shopify/active_merchant.git
script/plugin install git://github.com/flyerhzm/activemerchant_patch_for_china.git
</code></pre>

install activemerchant and activemerchant_patch_for_china as gems:

<pre><code>
sudo gem install activemerchant
sudo gem install activemerchant_patch_for_china
</code></pre>



**************************************************************************

h2. Configuration

if you install active_merchant and activemerchant_patch_for_china as rails plugins, then define plugin load order in <code>config/environment.rb</code> to promise activemerchant_patch_for_china is loaded after active_merchant.

<pre><code>
config.plugins = [:all, :active_merchant, :activemerchant_patch_for_china]
</code></pre>

if you install activemerchant and activemerchant_patch_for_china as gems, then define in <code>config/environment.rb</code>

<pre><code>
config.gem "activemerchant", :lib => "active_merchant"
config.gem "activemerchant_patch_for_china", :lib => false


require 'active_merchant'
require 'active_merchant/billing/integrations/action_view_helper'

ActionView::Base.send(:include, ActiveMerchant::Billing::Integrations::ActionViewHelper)
</code></pre>

then define your api key, account and email

<pre><code>
ActiveMerchant::Billing::Integrations::Alipay::KEY
ActiveMerchant::Billing::Integrations::Alipay::ACCOUNT
ActiveMerchant::Billing::Integrations::Alipay::EMAIL
</code></pre>

**************************************************************************

h2. Usage

<pre><code>
<% payment_service_for 'payment code', ActiveMerchant::Billing::Integrations::Alipay::ACCOUNT,
                            :service => :alipay,
                            :html => { :id => 'payment-form', :method => :get } do |service| %>
  <% service.total_fee 0.02 %>
  <%# service.price 0.01 %>
  <%# service.quantity 2 %>
  <% service.seller :email => ActiveMerchant::Billing::Integrations::Alipay::EMAIL %>
  <% service.notify_url url_for(:only_path => false, :action => 'notify') %>
  <% service.return_url url_for(:only_path => false, :action => 'done') %>
  <% service.show_url url_for(:only_path => false, :action => 'show') %>
  <% service.body 'payment body' %>
  <% service.charset "utf-8" %>
  <% service.service "create_direct_pay_by_user" %>
  <% service.payment_type 1 %>
  <% service.subject 'payment subject' %>
  <% service.sign %>
<% end %>
<%= button_to_function "Submit", "document.getElementById('payment-form').submit();" %>
</code></pre>

*payment code is the out_trade_no, it must be unique.*
amount is the total_fee.
payment body is the body of the payment.
payment subject is the subject of the payment.

**************************************************************************


Copyright (c) 2009 [nouse], released under the MIT license
